{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","a","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","category","loading","state","setstate","useEffect","then","imgs","useFetchGifs","encodeURI","imagen","key","GifExpertApp","categorias","cat","ReactDOM","render","document","getElementById"],"mappings":"mNAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAahD,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACFC,QAAQC,IAAI,gBACRN,EAAWO,OAAOC,OAAS,IAC7BV,GAAc,SAACW,GAAD,OAAYT,GAAZ,mBAA0BS,OACxCR,EAAc,OAKd,2BAAOS,KAAK,OAAOC,MAAOX,EAAYY,SAbjB,SAACT,GACxBF,EAAcE,EAAEU,OAAOF,YCHdG,EAAc,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAElC,OADAZ,QAAQC,IAAIS,GAER,yBAAKG,UAAU,QAEZ,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCPFK,EAAO,uCAAG,WAAOJ,GAAP,qBAAAK,EAAA,sEACAC,MAAMN,GADN,cACbO,EADa,gBAEIA,EAAKC,OAFT,uBAEXC,EAFW,EAEXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLd,GAAIc,EAAId,GACRC,MAAOa,EAAIb,MACXC,IAAKY,EAAIC,OAAOC,iBAAiBd,QAPlB,kBAaXU,GAbW,2CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,ECHb,SAAChB,GAAS,IAAD,EACTlB,mBAAS,CACjC2B,KAAM,GACNQ,SAAS,IAHwB,mBAC5BC,EAD4B,KACrBC,EADqB,KAgBnC,OAVAC,qBAAU,WACRhB,EAAQJ,GAAKqB,MAAK,SAACC,GACjBlC,QAAQC,IAAIiC,GACZH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACjB,IAEGkB,EDFsBK,CATpB,iDAA6CC,UAAUR,GAAvD,6BADM,qCAUHH,EAX2B,EAWhCJ,KAAYQ,EAXoB,EAWpBA,QAEnB,OACE,oCACA,4BAAKD,GACJC,GAAW,uCACT,yBAAKhB,UAAU,aAGbY,EAAOF,KAAI,SAACc,GAAD,OACV,kBAAC,EAAD,eACAC,IAAKD,EAAO3B,IACR2B,UEzBDE,EAAe,WAAM,MAEE7C,mBAAS,CAAC,cAFZ,mBAE3B8C,EAF2B,KAEf/C,EAFe,KAUhC,OACE,oCACE,4CACA,kBAAC,EAAD,CACAA,cAAeA,IACf,6BAEC+C,EAAWjB,KAAI,SAACkB,GACf,OAAO,kBAAC,EAAD,CAASH,IAAKG,EAAKb,SAAUa,SCf5CC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ea150e7f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Proptypes from 'prop-types'\nexport const AddCategory = ({ setCategorias }) => {\n  const [inputValue, setInputValue] = useState('');\n  const handleInputValue = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"submit hecho\");\n    if (inputValue.trim().length > 2) {\n      setCategorias((cats) => [ inputValue,...cats]);\n      setInputValue('');\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputValue}></input>\n    </form>\n  );\n};\n\nAddCategory.propTypes={\n    setCategorias: Proptypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    console.log(id)\n    return (\n        <div className=\"card\">\n        \n           <img src={url} alt={title}></img> \n           <p>{title}</p>       \n       \n        </div>\n    )\n}\n","\nexport const getGifs = async (url) => {\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images.downsized_medium.url,\n      };\n    });\n    // la funciÃ³n marcada como async siempre\n    // devuelve una promesa!\n     \n    return (gifs);\n   \n  };","import React, { useState, useEffect } from \"react\";\nimport { GifGridItem } from \"../components/GifGridItem\";\nimport {getGifs} from \"../helpers/getGifs\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n  const apiKey = \"eBHH7BLGeQviyhM8FyoIaVveWFeN72yl\";\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\n\n  /* const [images, setImages] = useState([]);\n  useEffect(() => {\n    getGifs(url)\n    .then(imgs=>setImages(imgs));\n  }, [url]);\n */\n\n  const {data:images,loading}= useFetchGifs(url);\n \n  return (\n    <>  \n    <h3>{category}</h3>\n    {loading && <p>Cargando</p>}\n   {   <div className='card-grid'>\n    \n      \n        {images.map((imagen) => (\n          <GifGridItem \n          key={imagen.id}\n          {...imagen} />\n        ))}\n     \n    </div> }\n   </> \n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\nexport const useFetchGifs = (url) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(url).then((imgs) => {\n      console.log(imgs);\n      setstate({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [url]);\n\n  return state; // retorna el objeto completo : array + boolean\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\nexport const GifExpertApp = () => {\n  // const categories=['One Punch','Samurai X','Dragon Ball'];\nconst [categorias, setCategorias] = useState([\"One Punch\"]);\n\n  /*   const handleAdd=()=>{\n         console.log('agregar');\n         setCategorias([...categorias,'Detective Conan']);\n         setCategorias(cats=>[...cats,'Detective Conan'])\n     } */\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory \n      setCategorias={setCategorias}></AddCategory>\n      <hr />\n\n      {categorias.map((cat) => {\n        return <GifGrid key={cat} category={cat}></GifGrid>;\n      })}\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n \n\nReactDOM.render(\n \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n  "],"sourceRoot":""}